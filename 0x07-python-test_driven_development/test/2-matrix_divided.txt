

The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
---------------------

This is a text file in reStructured Text format. First import ``matrix_divided`` from the ``2-matrix_divided`` module:

     >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    Test for empty matrix
    >>> matrix_divided([], 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    Test for empty row
    >>> matrix_divided([[]], 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    Test None instead of matrix
    >>> matrix_divided(None, 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided()
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

    Test int instead of matrix
    >>> matrix_divided(5, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    Test tuple instead of matrix
    >>> matrix_divided((1, 2, 3), 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    Test unequal rows
    >>> matrix_divided([[1, 2, 3], [4, 5]], 1)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

    Matrix may be an array with only zero
    >>> matrix_divided([[0]], 1)
    [[0.0]]

    Only integers and floats may be provided.
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "School")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    Test divide by zero
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

    Test infinite number
    >>> matrix_divided([[1, 2], [3, 4]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

    Test nan
    >>> matrix_divided([[0]], float('nan'))
    [[nan]]

The ``2-matrix_divide`` module
======================

Using ``matrix_divided``
-------------------

test for a function that divides a matrix by a integer
``matrix_divided`` from the `2-matrix_divide`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing null matrix:

    >>> matrix_divided(None, 0)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a list:

    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix without number:

    >>> matrix_divided([[2, 1, 3], [1, 5, 'a']], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[[2], 1, 3], [1, 5, 0]], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a weird div:
    >>> matrix_divided([[2, 1, 3], [1, 5, 2]], None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided([[2, 1, 3], [1, 5, 2]], [2])
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided([[2, 1, 3], [1, 5, 2]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Ok cases:

    >>> matrix = [[2, 2, 2],[2, 2, -2]]
    >>> matrix_divided(matrix, 2)
    [[1.0, 1.0, 1.0], [1.0, 1.0, -1.0]]

    >>> matrix = [[100, 50, 25],[1000, 500, 50]]
    >>> matrix_divided(matrix, 5)
    [[20.0, 10.0, 5.0], [200.0, 100.0, 10.0]]

    >>> matrix = [[100, 50, 25],[1000, 500, 50]]
    >>> matrix_divided(matrix, 1)
    [[100.0, 50.0, 25.0], [1000.0, 500.0, 50.0]]

    >>> matrix = [[25.5, 30.2, 4.2],[15, 1, 0.5]]
    >>> matrix_divided(matrix, 2.5)
    [[10.2, 12.08, 1.68], [6.0, 0.4, 0.2]]
