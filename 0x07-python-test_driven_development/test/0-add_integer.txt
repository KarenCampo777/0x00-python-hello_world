Test Driven Develoment (TDD)

This _is a test _file _for task0. Its porpuse _is to test _all possible casses on my program
===================================
Using function add_integer() 
-------------------------------------------------------
import add_integer from module_name

    >>> add_integer = __import__('module_name').add_integer

    >>> add_integer(2, 2)
    4

Regular cases:
output the result of the sum of two positive integers:

    >>> add_integer(1, 2)
    3

output the result of the sum of both negative numbers are negatives:

    >>> add_integer(-3, -3)
    -6

output the result of the  sum of two numbers with opposite sign:

    >>> add_integer(1, -1)
    0

    >>> add_integer(-2, 1)
    1

    >>> add_integer(3, -5)
    -2

Floats cases:
Floats cast as integers:

    >>> add_integer(10.5, -3)
    7

Cast two float numbers as integer:

    >>> add_integer(8.2, 2.15)
    10

    >>> add_integer(3.5, 3.5)
    7


None argument and error  cases:
The output should be an error:

    >>> add_integer(None)
    Traceback (most recent call last):
    ... 
    TypeError: a must be an integer

The output should be an error:

    >>> add_integer(float("inf"))
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer")
    

Inputs different than integers and floats

    >>> add_integer("vegeta", 777)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Empty or space input:

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


A huge  number number case, like Google:

    >>> add_integer(100 * (10**100))
    Traceback (most recent call last):
    ...
    TypeError: 'int' object is not callable
